// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace reflection
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Field : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Field GetRootAsField(ByteBuffer _bb) { return GetRootAsField(_bb, new Field()); }
  public static Field GetRootAsField(ByteBuffer _bb, Field obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Field __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public reflection.Type? Type { get { int o = __p.__offset(6); return o != 0 ? (reflection.Type?)(new reflection.Type()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ushort Id { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public ushort Offset { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public long DefaultInteger { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public double DefaultReal { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public bool Deprecated { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Required { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Key { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public reflection.KeyValue? Attributes(int j) { int o = __p.__offset(22); return o != 0 ? (reflection.KeyValue?)(new reflection.KeyValue()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AttributesLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public reflection.KeyValue? AttributesByKey(string key) { int o = __p.__offset(22); return o != 0 ? reflection.KeyValue.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }
  public string Documentation(int j) { int o = __p.__offset(24); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DocumentationLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
  public bool Optional { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  /// Number of padding octets to always add after this field. Structs only.
  public ushort Padding { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  /// If the field uses 64-bit offsets.
  public bool Offset64 { get { int o = __p.__offset(30); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<reflection.Field> CreateField(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      Offset<reflection.Type> typeOffset = default(Offset<reflection.Type>),
      ushort id = 0,
      ushort offset = 0,
      long default_integer = 0,
      double default_real = 0.0,
      bool deprecated = false,
      bool required = false,
      bool key = false,
      VectorOffset attributesOffset = default(VectorOffset),
      VectorOffset documentationOffset = default(VectorOffset),
      bool optional = false,
      ushort padding = 0,
      bool offset64 = false) {
    builder.StartTable(14);
    Field.AddDefaultReal(builder, default_real);
    Field.AddDefaultInteger(builder, default_integer);
    Field.AddDocumentation(builder, documentationOffset);
    Field.AddAttributes(builder, attributesOffset);
    Field.AddType(builder, typeOffset);
    Field.AddName(builder, nameOffset);
    Field.AddPadding(builder, padding);
    Field.AddOffset(builder, offset);
    Field.AddId(builder, id);
    Field.AddOffset64(builder, offset64);
    Field.AddOptional(builder, optional);
    Field.AddKey(builder, key);
    Field.AddRequired(builder, required);
    Field.AddDeprecated(builder, deprecated);
    return Field.EndField(builder);
  }

  public static void StartField(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddType(FlatBufferBuilder builder, Offset<reflection.Type> typeOffset) { builder.AddOffset(1, typeOffset.Value, 0); }
  public static void AddId(FlatBufferBuilder builder, ushort id) { builder.AddUshort(2, id, 0); }
  public static void AddOffset(FlatBufferBuilder builder, ushort offset) { builder.AddUshort(3, offset, 0); }
  public static void AddDefaultInteger(FlatBufferBuilder builder, long defaultInteger) { builder.AddLong(4, defaultInteger, 0); }
  public static void AddDefaultReal(FlatBufferBuilder builder, double defaultReal) { builder.AddDouble(5, defaultReal, 0.0); }
  public static void AddDeprecated(FlatBufferBuilder builder, bool deprecated) { builder.AddBool(6, deprecated, false); }
  public static void AddRequired(FlatBufferBuilder builder, bool required) { builder.AddBool(7, required, false); }
  public static void AddKey(FlatBufferBuilder builder, bool key) { builder.AddBool(8, key, false); }
  public static void AddAttributes(FlatBufferBuilder builder, VectorOffset attributesOffset) { builder.AddOffset(9, attributesOffset.Value, 0); }
  public static VectorOffset CreateAttributesVector(FlatBufferBuilder builder, Offset<reflection.KeyValue>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAttributesVectorBlock(FlatBufferBuilder builder, Offset<reflection.KeyValue>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAttributesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<reflection.KeyValue>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAttributesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<reflection.KeyValue>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAttributesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDocumentation(FlatBufferBuilder builder, VectorOffset documentationOffset) { builder.AddOffset(10, documentationOffset.Value, 0); }
  public static VectorOffset CreateDocumentationVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDocumentationVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDocumentationVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDocumentationVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDocumentationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOptional(FlatBufferBuilder builder, bool optional) { builder.AddBool(11, optional, false); }
  public static void AddPadding(FlatBufferBuilder builder, ushort padding) { builder.AddUshort(12, padding, 0); }
  public static void AddOffset64(FlatBufferBuilder builder, bool offset64) { builder.AddBool(13, offset64, false); }
  public static Offset<reflection.Field> EndField(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // name
    builder.Required(o, 6);  // type
    return new Offset<reflection.Field>(o);
  }

  public static VectorOffset CreateSortedVectorOfField(FlatBufferBuilder builder, Offset<Field>[] offsets) {
    Array.Sort(offsets,
      (Offset<Field> o1, Offset<Field> o2) =>
        new Field().__assign(builder.DataBuffer.Length - o1.Value, builder.DataBuffer).Name.CompareTo(new Field().__assign(builder.DataBuffer.Length - o2.Value, builder.DataBuffer).Name));
    return builder.CreateVectorOfTables(offsets);
  }

  public static Field? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    Field obj_ = new Field();
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      obj_.__assign(tableOffset, bb);
      int comp = obj_.Name.CompareTo(key);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return obj_;
      }
    }
    return null;
  }
  public FieldT UnPack() {
    var _o = new FieldT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FieldT _o) {
    _o.Name = this.Name;
    _o.Type = this.Type.HasValue ? this.Type.Value.UnPack() : null;
    _o.Id = this.Id;
    _o.Offset = this.Offset;
    _o.DefaultInteger = this.DefaultInteger;
    _o.DefaultReal = this.DefaultReal;
    _o.Deprecated = this.Deprecated;
    _o.Required = this.Required;
    _o.Key = this.Key;
    _o.Attributes = new List<reflection.KeyValueT>();
    for (var _j = 0; _j < this.AttributesLength; ++_j) {_o.Attributes.Add(this.Attributes(_j).HasValue ? this.Attributes(_j).Value.UnPack() : null);}
    _o.Documentation = new List<string>();
    for (var _j = 0; _j < this.DocumentationLength; ++_j) {_o.Documentation.Add(this.Documentation(_j));}
    _o.Optional = this.Optional;
    _o.Padding = this.Padding;
    _o.Offset64 = this.Offset64;
  }
  public static Offset<reflection.Field> Pack(FlatBufferBuilder builder, FieldT _o) {
    if (_o == null) return default(Offset<reflection.Field>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _type = _o.Type == null ? default(Offset<reflection.Type>) : reflection.Type.Pack(builder, _o.Type);
    var _attributes = default(VectorOffset);
    if (_o.Attributes != null) {
      var __attributes = new Offset<reflection.KeyValue>[_o.Attributes.Count];
      for (var _j = 0; _j < __attributes.Length; ++_j) { __attributes[_j] = reflection.KeyValue.Pack(builder, _o.Attributes[_j]); }
      _attributes = CreateAttributesVector(builder, __attributes);
    }
    var _documentation = default(VectorOffset);
    if (_o.Documentation != null) {
      var __documentation = new StringOffset[_o.Documentation.Count];
      for (var _j = 0; _j < __documentation.Length; ++_j) { __documentation[_j] = builder.CreateString(_o.Documentation[_j]); }
      _documentation = CreateDocumentationVector(builder, __documentation);
    }
    return CreateField(
      builder,
      _name,
      _type,
      _o.Id,
      _o.Offset,
      _o.DefaultInteger,
      _o.DefaultReal,
      _o.Deprecated,
      _o.Required,
      _o.Key,
      _attributes,
      _documentation,
      _o.Optional,
      _o.Padding,
      _o.Offset64);
  }
}

public class FieldT
{
  public string Name { get; set; }
  public reflection.TypeT Type { get; set; }
  public ushort Id { get; set; }
  public ushort Offset { get; set; }
  public long DefaultInteger { get; set; }
  public double DefaultReal { get; set; }
  public bool Deprecated { get; set; }
  public bool Required { get; set; }
  public bool Key { get; set; }
  public List<reflection.KeyValueT> Attributes { get; set; }
  public List<string> Documentation { get; set; }
  public bool Optional { get; set; }
  public ushort Padding { get; set; }
  public bool Offset64 { get; set; }

  public FieldT() {
    this.Name = null;
    this.Type = null;
    this.Id = 0;
    this.Offset = 0;
    this.DefaultInteger = 0;
    this.DefaultReal = 0.0;
    this.Deprecated = false;
    this.Required = false;
    this.Key = false;
    this.Attributes = null;
    this.Documentation = null;
    this.Optional = false;
    this.Padding = 0;
    this.Offset64 = false;
  }
}


static public class FieldVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Name*/, true)
      && verifier.VerifyTable(tablePos, 6 /*Type*/, reflection.TypeVerify.Verify, true)
      && verifier.VerifyField(tablePos, 8 /*Id*/, 2 /*ushort*/, 2, false)
      && verifier.VerifyField(tablePos, 10 /*Offset*/, 2 /*ushort*/, 2, false)
      && verifier.VerifyField(tablePos, 12 /*DefaultInteger*/, 8 /*long*/, 8, false)
      && verifier.VerifyField(tablePos, 14 /*DefaultReal*/, 8 /*double*/, 8, false)
      && verifier.VerifyField(tablePos, 16 /*Deprecated*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 18 /*Required*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 20 /*Key*/, 1 /*bool*/, 1, false)
      && verifier.VerifyVectorOfTables(tablePos, 22 /*Attributes*/, reflection.KeyValueVerify.Verify, false)
      && verifier.VerifyVectorOfStrings(tablePos, 24 /*Documentation*/, false)
      && verifier.VerifyField(tablePos, 26 /*Optional*/, 1 /*bool*/, 1, false)
      && verifier.VerifyField(tablePos, 28 /*Padding*/, 2 /*ushort*/, 2, false)
      && verifier.VerifyField(tablePos, 30 /*Offset64*/, 1 /*bool*/, 1, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
