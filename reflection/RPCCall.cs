// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace reflection
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct RPCCall : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static RPCCall GetRootAsRPCCall(ByteBuffer _bb) { return GetRootAsRPCCall(_bb, new RPCCall()); }
  public static RPCCall GetRootAsRPCCall(ByteBuffer _bb, RPCCall obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RPCCall __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public reflection.Object? Request { get { int o = __p.__offset(6); return o != 0 ? (reflection.Object?)(new reflection.Object()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public reflection.Object? Response { get { int o = __p.__offset(8); return o != 0 ? (reflection.Object?)(new reflection.Object()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public reflection.KeyValue? Attributes(int j) { int o = __p.__offset(10); return o != 0 ? (reflection.KeyValue?)(new reflection.KeyValue()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int AttributesLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public reflection.KeyValue? AttributesByKey(string key) { int o = __p.__offset(10); return o != 0 ? reflection.KeyValue.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }
  public string Documentation(int j) { int o = __p.__offset(12); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int DocumentationLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<reflection.RPCCall> CreateRPCCall(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      Offset<reflection.Object> requestOffset = default(Offset<reflection.Object>),
      Offset<reflection.Object> responseOffset = default(Offset<reflection.Object>),
      VectorOffset attributesOffset = default(VectorOffset),
      VectorOffset documentationOffset = default(VectorOffset)) {
    builder.StartTable(5);
    RPCCall.AddDocumentation(builder, documentationOffset);
    RPCCall.AddAttributes(builder, attributesOffset);
    RPCCall.AddResponse(builder, responseOffset);
    RPCCall.AddRequest(builder, requestOffset);
    RPCCall.AddName(builder, nameOffset);
    return RPCCall.EndRPCCall(builder);
  }

  public static void StartRPCCall(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddRequest(FlatBufferBuilder builder, Offset<reflection.Object> requestOffset) { builder.AddOffset(1, requestOffset.Value, 0); }
  public static void AddResponse(FlatBufferBuilder builder, Offset<reflection.Object> responseOffset) { builder.AddOffset(2, responseOffset.Value, 0); }
  public static void AddAttributes(FlatBufferBuilder builder, VectorOffset attributesOffset) { builder.AddOffset(3, attributesOffset.Value, 0); }
  public static VectorOffset CreateAttributesVector(FlatBufferBuilder builder, Offset<reflection.KeyValue>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAttributesVectorBlock(FlatBufferBuilder builder, Offset<reflection.KeyValue>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAttributesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<reflection.KeyValue>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateAttributesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<reflection.KeyValue>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartAttributesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDocumentation(FlatBufferBuilder builder, VectorOffset documentationOffset) { builder.AddOffset(4, documentationOffset.Value, 0); }
  public static VectorOffset CreateDocumentationVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDocumentationVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDocumentationVectorBlock(FlatBufferBuilder builder, ArraySegment<StringOffset> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateDocumentationVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<StringOffset>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartDocumentationVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<reflection.RPCCall> EndRPCCall(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // name
    builder.Required(o, 6);  // request
    builder.Required(o, 8);  // response
    return new Offset<reflection.RPCCall>(o);
  }

  public static VectorOffset CreateSortedVectorOfRPCCall(FlatBufferBuilder builder, Offset<RPCCall>[] offsets) {
    Array.Sort(offsets,
      (Offset<RPCCall> o1, Offset<RPCCall> o2) =>
        new RPCCall().__assign(builder.DataBuffer.Length - o1.Value, builder.DataBuffer).Name.CompareTo(new RPCCall().__assign(builder.DataBuffer.Length - o2.Value, builder.DataBuffer).Name));
    return builder.CreateVectorOfTables(offsets);
  }

  public static RPCCall? __lookup_by_key(int vectorLocation, string key, ByteBuffer bb) {
    RPCCall obj_ = new RPCCall();
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      obj_.__assign(tableOffset, bb);
      int comp = obj_.Name.CompareTo(key);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return obj_;
      }
    }
    return null;
  }
  public RPCCallT UnPack() {
    var _o = new RPCCallT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RPCCallT _o) {
    _o.Name = this.Name;
    _o.Request = this.Request.HasValue ? this.Request.Value.UnPack() : null;
    _o.Response = this.Response.HasValue ? this.Response.Value.UnPack() : null;
    _o.Attributes = new List<reflection.KeyValueT>();
    for (var _j = 0; _j < this.AttributesLength; ++_j) {_o.Attributes.Add(this.Attributes(_j).HasValue ? this.Attributes(_j).Value.UnPack() : null);}
    _o.Documentation = new List<string>();
    for (var _j = 0; _j < this.DocumentationLength; ++_j) {_o.Documentation.Add(this.Documentation(_j));}
  }
  public static Offset<reflection.RPCCall> Pack(FlatBufferBuilder builder, RPCCallT _o) {
    if (_o == null) return default(Offset<reflection.RPCCall>);
    var _name = _o.Name == null ? default(StringOffset) : builder.CreateString(_o.Name);
    var _request = _o.Request == null ? default(Offset<reflection.Object>) : reflection.Object.Pack(builder, _o.Request);
    var _response = _o.Response == null ? default(Offset<reflection.Object>) : reflection.Object.Pack(builder, _o.Response);
    var _attributes = default(VectorOffset);
    if (_o.Attributes != null) {
      var __attributes = new Offset<reflection.KeyValue>[_o.Attributes.Count];
      for (var _j = 0; _j < __attributes.Length; ++_j) { __attributes[_j] = reflection.KeyValue.Pack(builder, _o.Attributes[_j]); }
      _attributes = CreateAttributesVector(builder, __attributes);
    }
    var _documentation = default(VectorOffset);
    if (_o.Documentation != null) {
      var __documentation = new StringOffset[_o.Documentation.Count];
      for (var _j = 0; _j < __documentation.Length; ++_j) { __documentation[_j] = builder.CreateString(_o.Documentation[_j]); }
      _documentation = CreateDocumentationVector(builder, __documentation);
    }
    return CreateRPCCall(
      builder,
      _name,
      _request,
      _response,
      _attributes,
      _documentation);
  }
}

public class RPCCallT
{
  public string Name { get; set; }
  public reflection.ObjectT Request { get; set; }
  public reflection.ObjectT Response { get; set; }
  public List<reflection.KeyValueT> Attributes { get; set; }
  public List<string> Documentation { get; set; }

  public RPCCallT() {
    this.Name = null;
    this.Request = null;
    this.Response = null;
    this.Attributes = null;
    this.Documentation = null;
  }
}


static public class RPCCallVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyString(tablePos, 4 /*Name*/, true)
      && verifier.VerifyTable(tablePos, 6 /*Request*/, reflection.ObjectVerify.Verify, true)
      && verifier.VerifyTable(tablePos, 8 /*Response*/, reflection.ObjectVerify.Verify, true)
      && verifier.VerifyVectorOfTables(tablePos, 10 /*Attributes*/, reflection.KeyValueVerify.Verify, false)
      && verifier.VerifyVectorOfStrings(tablePos, 12 /*Documentation*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
