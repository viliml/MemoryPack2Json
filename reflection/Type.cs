// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace reflection
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Type : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Type GetRootAsType(ByteBuffer _bb) { return GetRootAsType(_bb, new Type()); }
  public static Type GetRootAsType(ByteBuffer _bb, Type obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Type __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public reflection.BaseType BaseType { get { int o = __p.__offset(4); return o != 0 ? (reflection.BaseType)__p.bb.GetSbyte(o + __p.bb_pos) : reflection.BaseType.None; } }
  public reflection.BaseType Element { get { int o = __p.__offset(6); return o != 0 ? (reflection.BaseType)__p.bb.GetSbyte(o + __p.bb_pos) : reflection.BaseType.None; } }
  public int Index { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)-1; } }
  public ushort FixedLength { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  /// The size (octets) of the `base_type` field.
  public uint BaseSize { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)4; } }
  /// The size (octets) of the `element` field, if present.
  public uint ElementSize { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<reflection.Type> CreateType(FlatBufferBuilder builder,
      reflection.BaseType base_type = reflection.BaseType.None,
      reflection.BaseType element = reflection.BaseType.None,
      int index = -1,
      ushort fixed_length = 0,
      uint base_size = 4,
      uint element_size = 0) {
    builder.StartTable(6);
    Type.AddElementSize(builder, element_size);
    Type.AddBaseSize(builder, base_size);
    Type.AddIndex(builder, index);
    Type.AddFixedLength(builder, fixed_length);
    Type.AddElement(builder, element);
    Type.AddBaseType(builder, base_type);
    return Type.EndType(builder);
  }

  public static void StartType(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddBaseType(FlatBufferBuilder builder, reflection.BaseType baseType) { builder.AddSbyte(0, (sbyte)baseType, 0); }
  public static void AddElement(FlatBufferBuilder builder, reflection.BaseType element) { builder.AddSbyte(1, (sbyte)element, 0); }
  public static void AddIndex(FlatBufferBuilder builder, int index) { builder.AddInt(2, index, -1); }
  public static void AddFixedLength(FlatBufferBuilder builder, ushort fixedLength) { builder.AddUshort(3, fixedLength, 0); }
  public static void AddBaseSize(FlatBufferBuilder builder, uint baseSize) { builder.AddUint(4, baseSize, 4); }
  public static void AddElementSize(FlatBufferBuilder builder, uint elementSize) { builder.AddUint(5, elementSize, 0); }
  public static Offset<reflection.Type> EndType(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<reflection.Type>(o);
  }
  public TypeT UnPack() {
    var _o = new TypeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TypeT _o) {
    _o.BaseType = this.BaseType;
    _o.Element = this.Element;
    _o.Index = this.Index;
    _o.FixedLength = this.FixedLength;
    _o.BaseSize = this.BaseSize;
    _o.ElementSize = this.ElementSize;
  }
  public static Offset<reflection.Type> Pack(FlatBufferBuilder builder, TypeT _o) {
    if (_o == null) return default(Offset<reflection.Type>);
    return CreateType(
      builder,
      _o.BaseType,
      _o.Element,
      _o.Index,
      _o.FixedLength,
      _o.BaseSize,
      _o.ElementSize);
  }
}

public class TypeT
{
  public reflection.BaseType BaseType { get; set; }
  public reflection.BaseType Element { get; set; }
  public int Index { get; set; }
  public ushort FixedLength { get; set; }
  public uint BaseSize { get; set; }
  public uint ElementSize { get; set; }

  public TypeT() {
    this.BaseType = reflection.BaseType.None;
    this.Element = reflection.BaseType.None;
    this.Index = -1;
    this.FixedLength = 0;
    this.BaseSize = 4;
    this.ElementSize = 0;
  }
}


static public class TypeVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*BaseType*/, 1 /*reflection.BaseType*/, 1, false)
      && verifier.VerifyField(tablePos, 6 /*Element*/, 1 /*reflection.BaseType*/, 1, false)
      && verifier.VerifyField(tablePos, 8 /*Index*/, 4 /*int*/, 4, false)
      && verifier.VerifyField(tablePos, 10 /*FixedLength*/, 2 /*ushort*/, 2, false)
      && verifier.VerifyField(tablePos, 12 /*BaseSize*/, 4 /*uint*/, 4, false)
      && verifier.VerifyField(tablePos, 14 /*ElementSize*/, 4 /*uint*/, 4, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
