// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace reflection
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Schema : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_25(); }
  public static Schema GetRootAsSchema(ByteBuffer _bb) { return GetRootAsSchema(_bb, new Schema()); }
  public static Schema GetRootAsSchema(ByteBuffer _bb, Schema obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool SchemaBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "BFBS"); }
  public static bool VerifySchema(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("BFBS", false, SchemaVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Schema __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public reflection.Object? Objects(int j) { int o = __p.__offset(4); return o != 0 ? (reflection.Object?)(new reflection.Object()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ObjectsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public reflection.Object? ObjectsByKey(string key) { int o = __p.__offset(4); return o != 0 ? reflection.Object.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }
  public reflection.Enum? Enums(int j) { int o = __p.__offset(6); return o != 0 ? (reflection.Enum?)(new reflection.Enum()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EnumsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public reflection.Enum? EnumsByKey(string key) { int o = __p.__offset(6); return o != 0 ? reflection.Enum.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }
  public string FileIdent { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFileIdentBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetFileIdentBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetFileIdentArray() { return __p.__vector_as_array<byte>(8); }
  public string FileExt { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFileExtBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetFileExtBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetFileExtArray() { return __p.__vector_as_array<byte>(10); }
  public reflection.Object? RootTable { get { int o = __p.__offset(12); return o != 0 ? (reflection.Object?)(new reflection.Object()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public reflection.Service? Services(int j) { int o = __p.__offset(14); return o != 0 ? (reflection.Service?)(new reflection.Service()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ServicesLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public reflection.Service? ServicesByKey(string key) { int o = __p.__offset(14); return o != 0 ? reflection.Service.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }
  public reflection.AdvancedFeatures AdvancedFeatures { get { int o = __p.__offset(16); return o != 0 ? (reflection.AdvancedFeatures)__p.bb.GetUlong(o + __p.bb_pos) : 0; } }
  /// All the files used in this compilation. Files are relative to where
  /// flatc was invoked.
  public reflection.SchemaFile? FbsFiles(int j) { int o = __p.__offset(18); return o != 0 ? (reflection.SchemaFile?)(new reflection.SchemaFile()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FbsFilesLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public reflection.SchemaFile? FbsFilesByKey(string key) { int o = __p.__offset(18); return o != 0 ? reflection.SchemaFile.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }

  public static Offset<reflection.Schema> CreateSchema(FlatBufferBuilder builder,
      VectorOffset objectsOffset = default(VectorOffset),
      VectorOffset enumsOffset = default(VectorOffset),
      StringOffset file_identOffset = default(StringOffset),
      StringOffset file_extOffset = default(StringOffset),
      Offset<reflection.Object> root_tableOffset = default(Offset<reflection.Object>),
      VectorOffset servicesOffset = default(VectorOffset),
      reflection.AdvancedFeatures advanced_features = 0,
      VectorOffset fbs_filesOffset = default(VectorOffset)) {
    builder.StartTable(8);
    Schema.AddAdvancedFeatures(builder, advanced_features);
    Schema.AddFbsFiles(builder, fbs_filesOffset);
    Schema.AddServices(builder, servicesOffset);
    Schema.AddRootTable(builder, root_tableOffset);
    Schema.AddFileExt(builder, file_extOffset);
    Schema.AddFileIdent(builder, file_identOffset);
    Schema.AddEnums(builder, enumsOffset);
    Schema.AddObjects(builder, objectsOffset);
    return Schema.EndSchema(builder);
  }

  public static void StartSchema(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddObjects(FlatBufferBuilder builder, VectorOffset objectsOffset) { builder.AddOffset(0, objectsOffset.Value, 0); }
  public static VectorOffset CreateObjectsVector(FlatBufferBuilder builder, Offset<reflection.Object>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateObjectsVectorBlock(FlatBufferBuilder builder, Offset<reflection.Object>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObjectsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<reflection.Object>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateObjectsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<reflection.Object>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartObjectsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEnums(FlatBufferBuilder builder, VectorOffset enumsOffset) { builder.AddOffset(1, enumsOffset.Value, 0); }
  public static VectorOffset CreateEnumsVector(FlatBufferBuilder builder, Offset<reflection.Enum>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEnumsVectorBlock(FlatBufferBuilder builder, Offset<reflection.Enum>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnumsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<reflection.Enum>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateEnumsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<reflection.Enum>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartEnumsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFileIdent(FlatBufferBuilder builder, StringOffset fileIdentOffset) { builder.AddOffset(2, fileIdentOffset.Value, 0); }
  public static void AddFileExt(FlatBufferBuilder builder, StringOffset fileExtOffset) { builder.AddOffset(3, fileExtOffset.Value, 0); }
  public static void AddRootTable(FlatBufferBuilder builder, Offset<reflection.Object> rootTableOffset) { builder.AddOffset(4, rootTableOffset.Value, 0); }
  public static void AddServices(FlatBufferBuilder builder, VectorOffset servicesOffset) { builder.AddOffset(5, servicesOffset.Value, 0); }
  public static VectorOffset CreateServicesVector(FlatBufferBuilder builder, Offset<reflection.Service>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateServicesVectorBlock(FlatBufferBuilder builder, Offset<reflection.Service>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateServicesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<reflection.Service>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateServicesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<reflection.Service>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartServicesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddAdvancedFeatures(FlatBufferBuilder builder, reflection.AdvancedFeatures advancedFeatures) { builder.AddUlong(6, (ulong)advancedFeatures, 0); }
  public static void AddFbsFiles(FlatBufferBuilder builder, VectorOffset fbsFilesOffset) { builder.AddOffset(7, fbsFilesOffset.Value, 0); }
  public static VectorOffset CreateFbsFilesVector(FlatBufferBuilder builder, Offset<reflection.SchemaFile>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFbsFilesVectorBlock(FlatBufferBuilder builder, Offset<reflection.SchemaFile>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFbsFilesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<reflection.SchemaFile>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFbsFilesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<reflection.SchemaFile>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFbsFilesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<reflection.Schema> EndSchema(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // objects
    builder.Required(o, 6);  // enums
    return new Offset<reflection.Schema>(o);
  }
  public static void FinishSchemaBuffer(FlatBufferBuilder builder, Offset<reflection.Schema> offset) { builder.Finish(offset.Value, "BFBS"); }
  public static void FinishSizePrefixedSchemaBuffer(FlatBufferBuilder builder, Offset<reflection.Schema> offset) { builder.FinishSizePrefixed(offset.Value, "BFBS"); }
  public SchemaT UnPack() {
    var _o = new SchemaT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SchemaT _o) {
    _o.Objects = new List<reflection.ObjectT>();
    for (var _j = 0; _j < this.ObjectsLength; ++_j) {_o.Objects.Add(this.Objects(_j).HasValue ? this.Objects(_j).Value.UnPack() : null);}
    _o.Enums = new List<reflection.EnumT>();
    for (var _j = 0; _j < this.EnumsLength; ++_j) {_o.Enums.Add(this.Enums(_j).HasValue ? this.Enums(_j).Value.UnPack() : null);}
    _o.FileIdent = this.FileIdent;
    _o.FileExt = this.FileExt;
    _o.RootTable = this.RootTable.HasValue ? this.RootTable.Value.UnPack() : null;
    _o.Services = new List<reflection.ServiceT>();
    for (var _j = 0; _j < this.ServicesLength; ++_j) {_o.Services.Add(this.Services(_j).HasValue ? this.Services(_j).Value.UnPack() : null);}
    _o.AdvancedFeatures = this.AdvancedFeatures;
    _o.FbsFiles = new List<reflection.SchemaFileT>();
    for (var _j = 0; _j < this.FbsFilesLength; ++_j) {_o.FbsFiles.Add(this.FbsFiles(_j).HasValue ? this.FbsFiles(_j).Value.UnPack() : null);}
  }
  public static Offset<reflection.Schema> Pack(FlatBufferBuilder builder, SchemaT _o) {
    if (_o == null) return default(Offset<reflection.Schema>);
    var _objects = default(VectorOffset);
    if (_o.Objects != null) {
      var __objects = new Offset<reflection.Object>[_o.Objects.Count];
      for (var _j = 0; _j < __objects.Length; ++_j) { __objects[_j] = reflection.Object.Pack(builder, _o.Objects[_j]); }
      _objects = CreateObjectsVector(builder, __objects);
    }
    var _enums = default(VectorOffset);
    if (_o.Enums != null) {
      var __enums = new Offset<reflection.Enum>[_o.Enums.Count];
      for (var _j = 0; _j < __enums.Length; ++_j) { __enums[_j] = reflection.Enum.Pack(builder, _o.Enums[_j]); }
      _enums = CreateEnumsVector(builder, __enums);
    }
    var _file_ident = _o.FileIdent == null ? default(StringOffset) : builder.CreateString(_o.FileIdent);
    var _file_ext = _o.FileExt == null ? default(StringOffset) : builder.CreateString(_o.FileExt);
    var _root_table = _o.RootTable == null ? default(Offset<reflection.Object>) : reflection.Object.Pack(builder, _o.RootTable);
    var _services = default(VectorOffset);
    if (_o.Services != null) {
      var __services = new Offset<reflection.Service>[_o.Services.Count];
      for (var _j = 0; _j < __services.Length; ++_j) { __services[_j] = reflection.Service.Pack(builder, _o.Services[_j]); }
      _services = CreateServicesVector(builder, __services);
    }
    var _fbs_files = default(VectorOffset);
    if (_o.FbsFiles != null) {
      var __fbs_files = new Offset<reflection.SchemaFile>[_o.FbsFiles.Count];
      for (var _j = 0; _j < __fbs_files.Length; ++_j) { __fbs_files[_j] = reflection.SchemaFile.Pack(builder, _o.FbsFiles[_j]); }
      _fbs_files = CreateFbsFilesVector(builder, __fbs_files);
    }
    return CreateSchema(
      builder,
      _objects,
      _enums,
      _file_ident,
      _file_ext,
      _root_table,
      _services,
      _o.AdvancedFeatures,
      _fbs_files);
  }
}

public class SchemaT
{
  public List<reflection.ObjectT> Objects { get; set; }
  public List<reflection.EnumT> Enums { get; set; }
  public string FileIdent { get; set; }
  public string FileExt { get; set; }
  public reflection.ObjectT RootTable { get; set; }
  public List<reflection.ServiceT> Services { get; set; }
  public reflection.AdvancedFeatures AdvancedFeatures { get; set; }
  public List<reflection.SchemaFileT> FbsFiles { get; set; }

  public SchemaT() {
    this.Objects = null;
    this.Enums = null;
    this.FileIdent = null;
    this.FileExt = null;
    this.RootTable = null;
    this.Services = null;
    this.AdvancedFeatures = 0;
    this.FbsFiles = null;
  }
  public static SchemaT DeserializeFromBinary(byte[] fbBuffer) {
    return Schema.GetRootAsSchema(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    Schema.FinishSchemaBuffer(fbb, Schema.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class SchemaVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Objects*/, reflection.ObjectVerify.Verify, true)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*Enums*/, reflection.EnumVerify.Verify, true)
      && verifier.VerifyString(tablePos, 8 /*FileIdent*/, false)
      && verifier.VerifyString(tablePos, 10 /*FileExt*/, false)
      && verifier.VerifyTable(tablePos, 12 /*RootTable*/, reflection.ObjectVerify.Verify, false)
      && verifier.VerifyVectorOfTables(tablePos, 14 /*Services*/, reflection.ServiceVerify.Verify, false)
      && verifier.VerifyField(tablePos, 16 /*AdvancedFeatures*/, 8 /*reflection.AdvancedFeatures*/, 8, false)
      && verifier.VerifyVectorOfTables(tablePos, 18 /*FbsFiles*/, reflection.SchemaFileVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
